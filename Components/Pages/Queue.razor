@page "/{serviceBusNameSpace}/{queueName}"

@using System.Text.Json
@using Azure.Messaging.ServiceBus
@using Microsoft.Extensions.Caching.Distributed
@using SbExplorer.Mud.Helpers
@using SbExplorer.Mud.Services
<MudText Typo="Typo.h3">@($"{ServiceBusNameSpace}/{QueueName}")</MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Active messages" Disabled="@(!Messages.Any())">
        <MudDataGrid Items="Messages" Loading="@(!Messages.Any())">
            <Columns>
                <HierarchyColumn T="ServiceBusMessageViewModel"/>
                <PropertyColumn Property="x => x.SequenceNumber"/>
                <PropertyColumn Property="x => x.MessageId"/>
                <PropertyColumn Property="x => x.EnqueuedTime"/>
                <PropertyColumn Property="x => x.State"/>
                <PropertyColumn Property="x => x.BodySize"/>
                <PropertyColumn Property="x => x.LabelSubject"/>
                <PropertyColumn Property="x => x.Body"/>
            </Columns>
            <ChildRowContent>
                <MudCard>

                    <MudText Typo="Typo.h6">Message Body</MudText>
                    <MudDivider/>
                    <pre>
    @(JsonSerializer.Serialize(@context.Item.Body, new JsonSerializerOptions() { WriteIndented = true }))
</pre>
                </MudCard>
                <MudCard>
                    <MudTable Items="context.Item.Properties">
                        <HeaderContent>
                            <MudTh>Key</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="RtContext">
                            <MudTd>@RtContext.Key</MudTd>
                            <MudTd>@RtContext.Value</MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudCard>
            </ChildRowContent>
            <PagerContent>
                <MudDataGridPager T="ServiceBusMessageViewModel"/>
            </PagerContent>
        </MudDataGrid>

    </MudTabPanel>
    <MudTabPanel Text="Dead Letter Messages" Disabled="@(!DeadLetterMessages.Any())">
        <MudDataGrid Items="Messages" Loading="@(!DeadLetterMessages.Any())">
            <Columns>
                <HierarchyColumn T="ServiceBusMessageViewModel"/>
                <PropertyColumn Property="x => x.SequenceNumber"/>
                <PropertyColumn Property="x => x.MessageId"/>
                <PropertyColumn Property="x => x.EnqueuedTime"/>
                <PropertyColumn Property="x => x.State"/>
                <PropertyColumn Property="x => x.BodySize"/>
                <PropertyColumn Property="x => x.LabelSubject"/>
                <PropertyColumn Property="x => x.Body"/>
            </Columns>
            <ChildRowContent>
                <MudCard>
                    <MudText Typo="Typo.h6">Message Body</MudText>
                    <MudText>@context.Item.Body</MudText>
                </MudCard>
                <MudCard>
                    <MudTable Items="context.Item.Properties">
                        <HeaderContent>
                            <MudTh>Key</MudTh>
                            <MudTh>Value</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="RtContext">
                            <MudTd>@RtContext.Key</MudTd>
                            <MudTd>@RtContext.Value</MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudCard>
            </ChildRowContent>
            <PagerContent>
                <MudDataGridPager T="ServiceBusMessageViewModel"/>
            </PagerContent>
        </MudDataGrid>
    </MudTabPanel>
    <MudTabPanel Text="Send message">
        <MudText Typo="Typo.h3">Not yet implemented</MudText>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public string QueueName { get; set; } = string.Empty;
    [Parameter] public string ServiceBusNameSpace { get; set; } = string.Empty;
    [Inject] ServiceBusClient Client { get; set; } = null!;
    [Inject] private IDistributedCache Cache { get; set; } = null!;
    private List<ServiceBusMessageViewModel> Messages { get; set; } = [];
    private List<ServiceBusMessageViewModel> DeadLetterMessages { get; set; } = [];
    private readonly PeriodicTimer _timer = new(TimeSpan.FromSeconds(5));

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();


        if (DeadLetterMessages.Count is 0 || Messages.Count is 0)
        {
            _ = RunTimer();
        }

        StateHasChanged();
    }


    private async Task RunTimer()
    {
        while (await _timer.WaitForNextTickAsync())
        {
            await LoadMessages();
            if (DeadLetterMessages.Count is not 0 || Messages.Count is not 0)
            {
                await InvokeAsync(StateHasChanged);
                break;
            }
        }
    }

    private async Task LoadMessages()
    {
        if (await Cache.GetAsync(CacheKeyHelper.QueueKey(ServiceBusNameSpace, QueueName)) is { } activeMessageBytes)
        {
            var messages = JsonSerializer.Deserialize<List<ServiceBusMessageViewModel>>(activeMessageBytes);
            Messages.AddRange(messages ?? []);
        }

        if (await Cache.GetAsync(CacheKeyHelper.DeadLetterQueueKey(ServiceBusNameSpace, QueueName)) is { } deadLetterMessageBytes)
        {
            var messages = JsonSerializer.Deserialize<List<ServiceBusMessageViewModel>>(deadLetterMessageBytes);
            DeadLetterMessages.AddRange(messages ?? []);
        }
    }
}