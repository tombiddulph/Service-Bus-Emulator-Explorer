// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using SbExplorer.Mud;
//
//    var welcome = Welcome.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace SbExplorer.Mud
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class EmulatorConfig
    {
        [JsonPropertyName("UserConfig")]
        public UserConfig UserConfig { get; set; }
    }

    public partial class UserConfig
    {
        [JsonPropertyName("Namespaces")]
        public List<Namespace> Namespaces { get; set; }

        [JsonPropertyName("Logging")]
        public Logging Logging { get; set; }
    }

    public partial class Logging
    {
        [JsonPropertyName("Type")]
        public string Type { get; set; }
    }

    public partial class Namespace
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Queues")]
        public List<Queue> Queues { get; set; }

        [JsonPropertyName("Topics")]
        public List<Topic> Topics { get; set; }
    }

    public partial class Queue
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Properties")]
        public QueueProperties Properties { get; set; }
    }

    public partial class QueueProperties
    {
        [JsonPropertyName("DeadLetteringOnMessageExpiration")]
        public bool DeadLetteringOnMessageExpiration { get; set; }

        [JsonPropertyName("DefaultMessageTimeToLive")]
        public string DefaultMessageTimeToLive { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("DuplicateDetectionHistoryTimeWindow")]
        public string DuplicateDetectionHistoryTimeWindow { get; set; }

        [JsonPropertyName("ForwardDeadLetteredMessagesTo")]
        public string ForwardDeadLetteredMessagesTo { get; set; }

        [JsonPropertyName("ForwardTo")]
        public string ForwardTo { get; set; }

        [JsonPropertyName("LockDuration")]
        public string LockDuration { get; set; }

        [JsonPropertyName("MaxDeliveryCount")]
        public long MaxDeliveryCount { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("RequiresDuplicateDetection")]
        public bool? RequiresDuplicateDetection { get; set; }

        [JsonPropertyName("RequiresSession")]
        public bool RequiresSession { get; set; }
    }

    public partial class Topic
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Properties")]
        public TopicProperties Properties { get; set; }

        [JsonPropertyName("Subscriptions")]
        public List<Subscription> Subscriptions { get; set; }
    }

    public partial class TopicProperties
    {
        [JsonPropertyName("DefaultMessageTimeToLive")]
        public string DefaultMessageTimeToLive { get; set; }

        [JsonPropertyName("DuplicateDetectionHistoryTimeWindow")]
        public string DuplicateDetectionHistoryTimeWindow { get; set; }

        [JsonPropertyName("RequiresDuplicateDetection")]
        public bool RequiresDuplicateDetection { get; set; }
    }

    public partial class Subscription
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Properties")]
        public QueueProperties Properties { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Rules")]
        public List<Rule> Rules { get; set; }
    }

    public partial class Rule
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Properties")]
        public RuleProperties Properties { get; set; }
    }

    public partial class RuleProperties
    {
        [JsonPropertyName("FilterType")]
        public string FilterType { get; set; }

        [JsonPropertyName("CorrelationFilter")]
        public CorrelationFilter CorrelationFilter { get; set; }
    }

    public partial class CorrelationFilter
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("ContentType")]
        public string ContentType { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("CorrelationId")]
        public string CorrelationId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Label")]
        public string Label { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("MessageId")]
        public string MessageId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("ReplyTo")]
        public string ReplyTo { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("ReplyToSessionId")]
        public string ReplyToSessionId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("SessionId")]
        public string SessionId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("To")]
        public string To { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Properties")]
        public CorrelationFilterProperties Properties { get; set; }
    }

    public partial class CorrelationFilterProperties
    {
        [JsonPropertyName("prop3")]
        public string Prop3 { get; set; }
    }

    public partial class EmulatorConfig
    {
        public static EmulatorConfig FromJson(string json) => JsonSerializer.Deserialize<EmulatorConfig>(json, SbExplorer.Mud.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this EmulatorConfig self) => JsonSerializer.Serialize(self, SbExplorer.Mud.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
